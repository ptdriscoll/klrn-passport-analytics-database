======================================================================================
Total Passport members watching 

SELECT COUNT(DISTINCT members_uid) AS total_members
FROM Views
WHERE date_time >= datetime('2018-12-01  00:00:00', 'localtime')
AND date_time <= datetime('2018-12-31  00:00:00', 'localtime'); 

======================================================================================
Total members watching, with identifiable member ids, (but subtract 1 NULL from total)

SELECT COUNT(DISTINCT Members.alleg_account_id) AS total_members_with_ids 
FROM Members
INNER JOIN Views ON Members.uid = Views.members_uid
WHERE Members.alleg_account_id IS NOT NULL
AND Views.date_time >= datetime('2018-06-01  00:00:00', 'localtime')
AND Views.date_time <= datetime('2018-06-30  00:00:00', 'localtime'); 

======================================================================================
Total members watching, based on identifiable emails

SELECT COUNT(DISTINCT Members.email) AS total_members_with_emails
FROM Members
INNER JOIN Views ON Members.uid = Views.members_uid
WHERE Members.email IS NOT NULL
AND Views.date_time >= datetime('2018-06-01  00:00:00', 'localtime')
AND Views.date_time <= datetime('2018-06-30  00:00:00', 'localtime'); 

======================================================================================
Get member ids Passport viewers

SELECT DISTINCT alleg_account_id 
FROM Members
WHERE alleg_account_id IS NOT NULL
ORDER BY alleg_account_id 

======================================================================================
Total views per member ids

SELECT 
  Members.alleg_account_id,
  COUNT(Views.id) AS total_count
FROM Views	
INNER JOIN Videos ON Views.videos_media_id = Videos.media_id  
INNER JOIN Members ON Views.members_uid = Members.uid
WHERE Views.date_time >= datetime('2016-04-01 00:00:00', 'localtime')
AND Views.date_time <= datetime('2017-08-01 00:00:00', 'localtime')
GROUP BY Members.alleg_account_id
ORDER BY total_count DESC;

======================================================================================
Channel views filtered by member id/s  

SELECT 
  Videos.content_channel,
  Members.alleg_account_id,
  COUNT(Views.id) AS total_count
FROM Views	
INNER JOIN Videos ON Views.videos_media_id = Videos.media_id  
INNER JOIN Members ON Views.members_uid = Members.uid
WHERE Views.date_time >= datetime('2016-04-01 00:00:00', 'localtime')
AND Views.date_time <= datetime('2019-06-01 00:00:00', 'localtime')
GROUP BY Videos.content_channel, Members.alleg_account_id
ORDER BY total_count DESC;

======================================================================================
Channel views filtered by specific member id/s  

SELECT 
  Videos.content_channel,
  Members.alleg_account_id,
  COUNT(Views.id) AS total_count
FROM Views	
INNER JOIN Videos ON Views.videos_media_id = Videos.media_id  
INNER JOIN Members ON Views.members_uid = Members.uid
WHERE Views.date_time >= datetime('2016-04-01 00:00:00', 'localtime')
AND Views.date_time <= datetime('2017-09-31 00:00:00', 'localtime')
AND Members.alleg_account_id IN (1743863, 72751, 1757541)
GROUP BY Videos.content_channel, Members.alleg_account_id 
ORDER BY total_count DESC;  

======================================================================================
Most popular first channels watched by new members

http://www.sqlitetutorial.net/sqlite-window-functions/sqlite-row_number/


SELECT 
  Videos.content_channel,
  COUNT(Views.id) AS total_count,
  ROW_NUMBER() OVER (
    PARTITION BY Members.uid
    ORDER BY Views.date_time
  ) AS row_number  
FROM Views		
INNER JOIN Videos ON Views.videos_media_id = Videos.media_id  
INNER JOIN Members ON Views.members_uid = Members.uid
WHERE Views.date_time >= datetime('2016-04-01 00:00:00', 'localtime')
AND Views.date_time <= datetime('2019-06-01 00:00:00', 'localtime')
GROUP BY Videos.content_channel
ORDER BY row_number, total_count DESC;

======================================================================================
Most popular first channels watched, filtered by time period new members acquired 

First get all unique member ids before Oct. 1

SELECT DISTINCT(Members.uid) AS id
FROM Members
INNER JOIN Views ON Members.uid = Views.members_uid 
WHERE Views.date_time >= datetime('2016-04-01 00:00:00', 'localtime')
AND Views.date_time < datetime('2020-10-01 00:00:00', 'localtime')
ORDER BY id 

http://www.sqlitetutorial.net/sqlite-window-functions/sqlite-row_number/

SELECT 
  Videos.content_channel,
  COUNT(Views.id) AS total_count,
  ROW_NUMBER() OVER (
    PARTITION BY Members.uid
    ORDER BY Views.date_time
  ) AS row_number  
FROM Views		
INNER JOIN Videos ON Views.videos_media_id = Videos.media_id  
INNER JOIN Members ON Views.members_uid = Members.uid
WHERE Views.date_time >= datetime('2020-10-01 00:00:00', 'localtime')
AND Views.date_time < datetime('2020-11-01 00:00:00', 'localtime')
AND Members.uid NOT IN (
	SELECT DISTINCT(Members.uid) AS id
	FROM Members
	INNER JOIN Views ON Members.uid = Views.members_uid 
	WHERE Views.date_time >= datetime('2016-04-01 00:00:00', 'localtime')
	AND Views.date_time < datetime('2020-10-01 00:00:00', 'localtime')) 
GROUP BY Videos.content_channel
ORDER BY row_number, total_count DESC;

======================================================================================
Episode views filtered by specific member id/s  

SELECT 
  Videos.content_channel,
  Videos.title,
  Members.alleg_account_id,
  COUNT(Views.id) AS total_count
FROM Views	
INNER JOIN Videos ON Views.videos_media_id = Videos.media_id  
INNER JOIN Members ON Views.members_uid = Members.uid
WHERE Views.date_time >= datetime('2016-04-01 00:00:00', 'localtime')
AND Views.date_time <= datetime('2017-09-31 00:00:00', 'localtime')
AND Members.alleg_account_id IN (1743863, 72751, 1757541)
GROUP BY Videos.title, Members.alleg_account_id 
ORDER BY total_count DESC; 

======================================================================================
Episode viewing amounts and video lengths per member id  

SELECT 
  Videos.content_channel,
  Videos.title,
  Members.alleg_account_id,
  Videos.video_length,
  SUM(Views.time_watched) AS time_watched,
  SUM(CAST(Views.time_watched AS REAL)/Videos.video_length) AS percent_watched
FROM Views	
INNER JOIN Videos ON Views.videos_media_id = Videos.media_id  
INNER JOIN Members ON Views.members_uid = Members.uid
WHERE Views.date_time >= datetime('2016-04-01 00:00:00', 'localtime')
AND Views.date_time <= datetime('2017-12-02 00:00:00', 'localtime')
GROUP BY Videos.title, Members.alleg_account_id 
ORDER BY Members.alleg_account_id DESC; 